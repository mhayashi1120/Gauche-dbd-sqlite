;;;
;;; dbd_sqlitelib.stub
;;;

(declcode
 (.include "dbd_sqlite.h")
 (.include <sqlite3.h>))

;;
;; Export asis
;;

(define-cproc sqlite-libversion ()
  (return (getLibSqliteVersion)))

(define-cproc sqlite-libversion-number ()
  (return (getLibSqliteVersionNumber)))

"
 static void printSqliteDb(ScmObj obj, ScmPort *out, ScmWriteContext *ctx)
 {
   Scm_Printf(out, \"#<sqlite-db %p>\", obj);
 }


 static void printSqliteStmt(ScmObj obj, ScmPort *out, ScmWriteContext *ctx)
 {
   Scm_Printf(out, \"#<sqlite-stmt %p>\", obj);
 }
"

;; (define-cptr <sqlite-db> :private
;;   "ScmSqliteDb*" "Scm_SqliteDbClass"
;;   "SCM_SQLITE_DB_P" "SCM_SQLITE_DB_BOX" "SCM_SQLITE_DB_UNBOX"
;;   ;; #f #f #f
;;   (print "printSqliteDb")
;;   )

;; (define-cptr <sqlite-stmt> :private
;;   "ScmSqliteStmt*" "Scm_SqliteStmtClass"
;;   "SCM_SQLITE_STMT_P" "SCM_SQLITE_STMT_BOX" "SCM_SQLITE_STMT_UNBOX"
;;   ;; #f #f #f
;;   (print "printSqliteStmt"))

(define-cclass <sqlite-db> "ScmSqliteDb*" "Scm_SqliteDbClass"
  ()
  ()
  (printer (Scm_Printf port "#<sqlite-db %p>" obj)))

(define-cclass <sqlite-stmt> "ScmSqliteStmt*" "Scm_SqliteStmtClass"
  ()
  ()
  (printer (Scm_Printf port "#<sqlite-stmt %p>" obj)))

;;
;; Module internal
;;

;; Required
(define-enum SQLITE_OPEN_READONLY)
(define-enum SQLITE_OPEN_READWRITE)
(define-enum SQLITE_OPEN_CREATE)

;; Optional flags
(define-enum-conditionally SQLITE_OPEN_URI)
(define-enum-conditionally SQLITE_OPEN_MEMORY)
(define-enum-conditionally SQLITE_OPEN_NOMUTEX)
(define-enum-conditionally SQLITE_OPEN_FULLMUTEX)
(define-enum-conditionally SQLITE_OPEN_SHAREDCACHE)
(define-enum-conditionally SQLITE_OPEN_PRIVATECACHE)
(define-enum-conditionally SQLITE_OPEN_NOFOLLOW)

(define-cproc open-db (path::<string> flags::<int> vfs)
  (return (openDB path flags vfs)))

(define-cproc db-close (db::<sqlite-db>) :: <void>
  (closeDB db))

(define-cproc prepare-stmt (db::<sqlite-db> query::<string>)
  (return (prepareStmt db query)))

(define-cproc stmt-parameters (stmt::<sqlite-stmt>)
  (return (listParameters stmt)))

;; TODO should return applied row count
;;   -> no! read-next return if not pair?
;; return value (<boolean>  TODO
(define-cproc execute-stmt (stmt::<sqlite-stmt> params::<list>)
  (bindParameters stmt params)
  (return (readResult stmt)))

(define-cproc stmt-is-readable (stmt::<sqlite-stmt>)
  ;; TODO
  )

(define-cproc stmt-read-columns (stmt::<sqlite-stmt>)
  ;; Return pair
  (return (-> stmt columns)))

;; (define-cproc open-stmt-reader (stmt::<sqlite-stmt>)
;;   )

(define-cproc stmt-read-next (stmt::<sqlite-stmt>)
  ;; TODO Return (readable? , vector | EOF)
  (return (readResult stmt)))

(define-cproc close-stmt (stmt::<sqlite-stmt>) :: <void>
  (closeStmt stmt))


;; Local variables:
;; mode: scheme
;; end:
