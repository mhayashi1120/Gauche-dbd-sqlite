;;;
;;; dbd_sqlitelib.stub
;;;

(declcode
 (.include "dbd_sqlite.h")
 (.include <sqlite3.h>))

;;
;; Export asis
;;

(define-cproc sqlite-libversion ()
  (return (getLibSqliteVersion)))

(define-cproc sqlite-libversion-number ()
  (return (getLibSqliteVersionNumber)))

(define-cclass <sqlite-db> "ScmSqliteDb*" "Scm_SqliteDbClass"
  ()
  ()
  (printer (Scm_Printf port "#<sqlite-db %p>" obj)))

(define-cclass <sqlite-stmt> "ScmSqliteStmt*" "Scm_SqliteStmtClass"
  ()
  ()
  (printer (Scm_Printf port "#<sqlite-stmt %p>" obj)))

;;
;; Module internal
;;

;; Required (Not exported)
(define-enum SQLITE_OPEN_READONLY)
(define-enum SQLITE_OPEN_READWRITE)
(define-enum SQLITE_OPEN_CREATE)

;; Optional flags (Not exported)
(define-enum-conditionally SQLITE_OPEN_URI)
(define-enum-conditionally SQLITE_OPEN_MEMORY)
(define-enum-conditionally SQLITE_OPEN_NOMUTEX)
(define-enum-conditionally SQLITE_OPEN_FULLMUTEX)
(define-enum-conditionally SQLITE_OPEN_SHAREDCACHE)
(define-enum-conditionally SQLITE_OPEN_PRIVATECACHE)
(define-enum-conditionally SQLITE_OPEN_NOFOLLOW)

(define-cproc open-db (path::<string> option-alist)
  (return (openDB path option-alist)))

(define-cproc close-db (db::<sqlite-db>) :: <void>
  (closeDB db))

;; Prepare flags (Not exported)
(define-enum-conditionally SQLITE_PREPARE_PERSISTENT)
(define-enum-conditionally SQLITE_PREPARE_NORMALIZE)
(define-enum-conditionally SQLITE_PREPARE_NO_VTAB)

(define-cproc prepare-stmt (db::<sqlite-db> query::<string> flags::<int>)
  (return (prepareStmt db query flags)))

(define-cproc inner-stmt-count (stmt::<sqlite-stmt>) :: <int>
  (return (-> stmt ptrCount)))

(define-cproc reset-last-stmt (stmt::<sqlite-stmt>) :: <void>
  (resetStmt stmt (- (-> stmt ptrCount) 1)))

(define-cproc list-parameters (stmt::<sqlite-stmt> index::<int>)
  (return (listParameters stmt index)))

;; return number | SELECT first result.
(define-cproc execute-inner-stmt (stmt::<sqlite-stmt> params::<list> index::<int>)
  (resetStmt stmt index)
  (bindParameters stmt index params)
  (return (readResult stmt index)))

(define-cproc list-columns (stmt::<sqlite-stmt>)
  ;; Return pair
  (return (-> stmt columns)))

;; read SELECT result set.
(define-cproc stmt-read-next (stmt::<sqlite-stmt>)
  (return (readResult stmt (- (-> stmt ptrCount) 1))))

(define-cproc close-stmt (stmt::<sqlite-stmt>) :: <void>
  (closeStmt stmt))


;; Local variables:
;; mode: scheme
;; end:
